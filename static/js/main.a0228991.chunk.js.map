{"version":3,"sources":["components/ProfileList.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["getRandomInt","min","max","Math","ceil","floor","random","ProfileList","props","type","justify","span","size","src","dataSource","picture","large","gutter","title","bordered","prefix","valueStyle","color","value","precision","Item","label","name","first","last","phone","location","country","gender","dob","date","age","street","number","city","postcode","hoverable","cover","alt","description","Profile","state","dataDrawer","placement","width","closable","onClose","this","visible","_","isEmpty","Component","App","handleOnCloseDrawer","setState","handleDrawer","record","drawerData","loading","tableListData","axios","get","then","response","data","results","style","margin","columns","dataIndex","rowKey","login","uuid","pagination","defaultPageSize","onRow","rowIndex","onClick","event","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0228991.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Avatar, Card, Col, Row, Descriptions, Statistic, Icon} from \"antd\";\r\nimport {Meta} from \"antd/es/list/Item\";\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction ProfileList(props) {\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <Row type=\"flex\" justify=\"center\">\r\n                    <Col span={4}><Avatar size={120} src={props.dataSource.picture.large} /></Col>\r\n                </Row>\r\n\r\n                <Row gutter={16}>\r\n                    <Col span={8}>\r\n                        <Card title=\"Account Balance\" bordered={false}>\r\n                            <Statistic prefix={<Icon type=\"arrow-up\" />} valueStyle={{ color: '#3f8600' }} value={getRandomInt(100,99999)} precision={2} />\r\n                        </Card>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Card title=\"Feedback\" bordered={false}>\r\n                            <Statistic valueStyle={{ color: '#3f8600' }} value={getRandomInt(100,99999)} prefix={<Icon type=\"like\" />} />\r\n                        </Card>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Card title=\"Completed Project\" bordered={false}>\r\n                            <Statistic valueStyle={{ color: '#3f8600' }} value={getRandomInt(100,99999)} prefix={<Icon type=\"check\" />} />\r\n\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Descriptions title=\"User Info\">\r\n                    <Descriptions.Item label=\"Full Name\">{props.dataSource.name.first} {props.dataSource.name.last}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Telephone\">{props.dataSource.phone}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Live\">{props.dataSource.location.country}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Gender\">{props.dataSource.gender}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Date Of Birth\">{props.dataSource.dob.date}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Age\">{props.dataSource.dob.age}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Address\" span={2}>\r\n                        {props.dataSource.location.street.number}, {props.dataSource.location.street.name}, {props.dataSource.location.city}, {props.dataSource.location.country}, {props.dataSource.location.postcode}\r\n                    </Descriptions.Item>\r\n                </Descriptions>\r\n            </Card>\r\n            <div>\r\n                <Row gutter={16}>\r\n                    <Col span={8}>\r\n                        <Card hoverable title=\"Project 1\" bordered={false} cover={<img alt=\"example\" src=\"https://picsum.photos/200/300?random=1\" />}>\r\n                            <Meta title=\"Europe Street beat\" description=\"www.instagram.com\" />\r\n                        </Card>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Card hoverable title=\"Project 2\" bordered={false} cover={<img alt=\"example\" src=\"https://picsum.photos/200/300?random=2\" />}>\r\n                            <Meta title=\"Europe Street beat\" description=\"www.instagram.com\" />\r\n                        </Card>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Card hoverable title=\"Project 3\" bordered={false} cover={<img alt=\"example\" src=\"https://picsum.photos/200/300?random=3\" />}>\r\n                            <Meta title=\"Europe Street beat\" description=\"www.instagram.com\" />\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileList;","import React, {Component} from 'react';\r\nimport { Drawer } from \"antd\";\r\nimport _ from 'lodash';\r\nimport ProfileList from \"./ProfileList\";\r\n\r\nclass Profile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dataDrawer : false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Drawer\r\n                    placement=\"right\"\r\n                    width={'50%'}\r\n                    closable={false}\r\n                    onClose={this.props.onClose}\r\n                    visible={this.props.visible}\r\n                >\r\n                    {\r\n                        (!_.isEmpty(this.props.dataSource)) ?\r\n                            <ProfileList dataSource={this.props.dataSource}/>\r\n                        :\r\n                        ''\r\n                    }\r\n\r\n                </Drawer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Profile;","import React, {Component} from 'react';\r\nimport { Table } from 'antd';\r\nimport axios from 'axios';\r\n\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport \"./index.css\";\r\nimport Profile from \"./components/Profile\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            visible: false,\r\n            loading: true,\r\n            tableListData: [],\r\n            drawerData: [],\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        axios\r\n            .get(\"https://randomuser.me/api/?results=200&seed=924cb858eea236a2\")\r\n            .then(response => {\r\n                this.setState({\r\n                    loading: false,\r\n                    tableListData: response.data.results\r\n                })\r\n            })\r\n    }\r\n\r\n    handleOnCloseDrawer = () => {\r\n        this.setState({visible: false})\r\n    };\r\n\r\n    handleDrawer = (record) => {\r\n        this.setState({\r\n            visible: true,\r\n            drawerData: record\r\n        })\r\n\r\n    };\r\n\r\n    render() {\r\n        const { loading, tableListData, visible, drawerData } = this.state;\r\n        const columns = [\r\n            {\r\n                title: 'First Name',\r\n                dataIndex: 'name.first',\r\n            },\r\n            {\r\n                title: 'Last Name',\r\n                dataIndex: 'name.last',\r\n            },\r\n            {\r\n                title: 'Gender',\r\n                dataIndex: 'gender',\r\n            },\r\n            {\r\n                title: 'Age',\r\n                dataIndex: 'dob.age',\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <div style={{margin:'20px'}}>\r\n                <Profile visible={visible} onClose={this.handleOnCloseDrawer} dataSource={drawerData} />\r\n\r\n                <Table\r\n                    columns={columns}\r\n                    loading={loading}\r\n                    rowKey={record => record.login.uuid}\r\n                    dataSource={tableListData}\r\n                    pagination={{defaultPageSize: 15}}\r\n                    onRow={(record, rowIndex) => {\r\n                        return {\r\n                            onClick: event => this.handleDrawer(record), // click row\r\n                        };\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}